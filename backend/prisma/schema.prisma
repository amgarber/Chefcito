generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                @id @default(autoincrement())
  username                String             @unique
  email                   String             @unique
  password                String?
  role                    Role               @default(USER)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  pictureId               Int?               @unique
  approvalRequestsHandled Approval_Request[] @relation("Approver")
  approvalRequestsSent    Approval_Request[] @relation("Solicitor")
  dayRecipes              DayRecipe[]
  favourites              Favourite[]
  planner                 Planner?
  PlannerRecipe           PlannerRecipe[]
  recipesAuthored         Recipe[]
  recipesApproved         Recipe[]           @relation("ApprovedByAdmin")
  lists                   Shopping_List[]
  picture                 User_Image?        @relation(fields: [pictureId], references: [id])
}

model User_Image {
  id   Int    @id @default(autoincrement())
  url  String
  user User?
}

model Recipe {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  difficulty        String
  preparation_time  Int
  UserId            Int
  imageId           Int?                @unique
  Privacy_settings  PrivacySetting      @default(PUBLIC)
  id_approval_admin Int?
  Approval_Status   ApprovalStatus      @default(PENDING)
  requests          Approval_Request[]
  dayRecipes        DayRecipe[]
  favourites        Favourite[]
  instructions      Instructions[]
  PlannerRecipe     PlannerRecipe[]
  user              User                @relation(fields: [UserId], references: [id], onDelete: Cascade)
  admin             User?               @relation("ApprovedByAdmin", fields: [id_approval_admin], references: [id])
  image             Image?              @relation(fields: [imageId], references: [id])
  ingredients       Recipe_Ingredient[]
  recipeTypes       Recipe_Type[]
}

model Image {
  id     Int     @id @default(autoincrement())
  url    String
  recipe Recipe?
}

model Favourite {
  id_user   Int
  id_recipe Int
  recipe    Recipe @relation(fields: [id_recipe], references: [id])
  user      User   @relation(fields: [id_user], references: [id])

  @@id([id_user, id_recipe])
}

model Ingredients {
  id      Int                        @id @default(autoincrement())
  name    String                     @unique
  type    String
  images  Ingredient_Image[]
  recipes Recipe_Ingredient[]
  list    Shopping_List_Ingredient[]
}

model Ingredient_Image {
  id           Int         @id @default(autoincrement())
  url          String
  ingredientId Int
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id])
}

model Recipe_Ingredient {
  id_recipe        Int
  id_ingredient    Int
  measurement_unit String
  quantity         Float
  ingredient       Ingredients @relation(fields: [id_ingredient], references: [id])
  recipe           Recipe      @relation(fields: [id_recipe], references: [id])

  @@unique([id_recipe, id_ingredient])
}

model Instructions {
  id                Int    @id @default(autoincrement())
  id_recipe         Int
  steps_numerations String
  Description       String
  recipe            Recipe @relation(fields: [id_recipe], references: [id], onDelete: Cascade)
}

model Recipe_Type {
  id_RecipeType   Int           @id @default(autoincrement())
  id_recipe       Int
  id_recipeFilter Int
  filter          Recipe_Filter @relation(fields: [id_recipeFilter], references: [id_RecipeFilter], onDelete: Cascade)
  recipe          Recipe        @relation(fields: [id_recipe], references: [id])

  @@unique([id_recipe, id_recipeFilter])
}

model Recipe_Filter {
  id_RecipeFilter Int           @id @default(autoincrement())
  Name            String
  recipe          Recipe_Type[]
}

model Shopping_List {
  id          Int                        @id @default(autoincrement())
  id_user     Int
  name        String
  user        User                       @relation(fields: [id_user], references: [id])
  ingredients Shopping_List_Ingredient[]

  @@unique([id_user, name])
}

model Shopping_List_Ingredient {
  id_ShoppingList Int
  id_Ingredients  Int
  quantity        String
  bought          Boolean
  ingredient      Ingredients   @relation(fields: [id_Ingredients], references: [id])
  list            Shopping_List @relation(fields: [id_ShoppingList], references: [id])

  @@unique([id_ShoppingList, id_Ingredients])
}

model Planner {
  id      Int  @id @default(autoincrement())
  id_user Int  @unique
  user    User @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model Approval_Request {
  id_solicitation   Int            @id @default(autoincrement())
  id_recipe         Int
  id_user_solicitor Int
  id_admin          Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  status            ApprovalStatus @default(PENDING)
  emailToken        String?        @unique
  tokenExpires      DateTime?      @default(dbgenerated("(now() + '2 days'::interval)"))
  admin             User?          @relation("Approver", fields: [id_admin], references: [id])
  recipe            Recipe         @relation(fields: [id_recipe], references: [id])
  solicitor         User           @relation("Solicitor", fields: [id_user_solicitor], references: [id])

  @@index([id_recipe])
  @@index([id_user_solicitor])
  @@index([id_admin])
}

model DayRecipe {
  id       String   @id @default(uuid())
  date     DateTime
  category String
  userId   Int
  recipeId Int
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model PlannerRecipe {
  id       String   @id @default(uuid())
  userId   Int
  recipeId Int
  date     DateTime
  category String
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

enum Role {
  ADMIN
  USER
}

enum PrivacySetting {
  PRIVATE
  PUBLIC
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
